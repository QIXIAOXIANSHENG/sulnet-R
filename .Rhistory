sum((predict(cvls,xtest)-ytest)^2)
sum((predict(cvfit2Dl,xtest)[[1]]-ytest)^2)
sum(coef(cvfit2D)[[1]][-1]!=0)
sum(cvuni$glmnet.fit$beta[,cvuni$lambda == cvuni$lambda.min]!=0)
sum(coef(cvls)[-1]!=0)
sum(coef(cvfit2Dl)[[1]][-1]!=0)
mean(abs(info$beta[coef(cvfit2D)[[1]][-1]!=0]))
mean(abs(info$beta[cvuni$glmnet.fit$beta[,cvuni$lambda == cvuni$lambda.min]!=0]))
mean(abs(info$beta[coef(cvls)[-1]!=0]))
mean(abs(info$beta[coef(cvfit2Dl)[[1]][-1]!=0]))
mean(abs(beta[coef(cvfit2D)[[1]][-1]!=0]))
mean(abs(beta[cvuni$glmnet.fit$beta[,cvuni$lambda == cvuni$lambda.min]!=0]))
mean(abs(beta[coef(cvls)[-1]!=0]))
mean(abs(beta[coef(cvfit2Dl)[[1]][-1]!=0]))
sum(abs(sign(beta)-sign(coef(cvfit2D)[[1]][-1]))<=1)
sum(abs(sign(beta)-sign(cvuni$glmnet.fit$beta[,cvuni$lambda == cvuni$lambda.min]))<=1)
sum(abs(sign(beta)-sign(coef(cvls)[-1]))<=1)
sum(abs(sign(beta)-sign(coef(cvfit2Dl)[[1]][-1]))<=1)
sum(abs(sign(info$beta)-sign(coef(cvfit2D)[[1]][-1]))<=1)
sum(abs(sign(info$beta)-sign(cvuni$glmnet.fit$beta[,cvuni$lambda == cvuni$lambda.min]))<=1)
sum(abs(sign(info$beta)-sign(coef(cvls)[-1]))<=1)
sum(abs(sign(info$beta)-sign(coef(cvfit2Dl)[[1]][-1]))<=1)
cvfit2D$cv.1se$alpha.1se
plot(cvfit2D)
cvfit2D = cv.sulnet2D(x,y,alpha = seq(0,0.99,length.out = 11),
lambda.factor = 0.01)
plot(cvfit2D)
cvfit2Dl = cv.sulnet2D(x,y,alpha = NULL, lamPos = seq(0.01,10,length.out = 21),
lambda.factor = 0.01)
plot(cvfit2Dl)
cvfit2D$lambda[1]
cvfit2Dl = cv.sulnet2D(x,y,alpha = NULL, lamPos = seq(0.01,24,length.out = 21),
lambda.factor = 0.01)
plot(cvfit2Dl)
plot(cvfit2D)
cvfit2D$cvm
plot(cvls)
cvfit2D = cv.sulnet2D(x,y,alpha = seq(0,0.99,length.out = 11),
lambda.factor = 0.1)
cvfit2Dl = cv.sulnet2D(x,y,alpha = NULL, lamPos = seq(0.01,24,length.out = 21),
lambda.factor = 0.1)
cvls = cv.sulnet(x,y)
cvls = cv.sulnet(x,y,lambda.factor = 0.1)
plot
plot(cvls)
cvfit2D = cv.sulnet2D(x,y,alpha = seq(0,0.99,length.out = 11),
lambda.factor = 0.001)
cvfit2Dl = cv.sulnet2D(x,y,alpha = NULL, lamPos = seq(0.01,24,length.out = 21),
lambda.factor = 0.001)
sulnetf = cvfit2D$sulnet2D.fit$univariate.fit$fitted.values
cvuni = cv.uniLasso(x,y,loo = TRUE)
cvls = cv.sulnet(x,y,lambda.factor = 0.001)
plot(cvls)
cvfit2Dl = cv.sulnet2D(x,y,alpha = NULL, lamPos = cvfit2D$lambda * 0.99,
lambda.factor = 0.001)
plot(cvfit2Dl)
cvfit2Dl$lamPos
cv1D = cv.sulnet(x,y,method = "suni")
plot(cv1D)
cv1D = cv.sulnet(x,y,method = "suni",alpha = 0.99)
plot(cv1D)
cv1D$lambda
cv1D = cv.sulnet(x,y,method = "suni",alpha = NULL, lambda = cv1D$lambda*0.01, lamPos = 0.2324961*0.99)
plot(cv1D)
min(cv1D$cvm)
min(cv.sulnet(x,y,method = "suni",alpha = 0.99)$cvm)
min(cv.sulnet(x,y,method = "suni",alpha = 0)$cvm)
min(cv.sulnet(x,y,method = "suni",alpha = NULL,lamPos = 0)$cvm)
min(cv.sulnet(x,y,method = "suni",alpha = 0,foldid = foldid)$cvm)
foldid = sample(1:10, n)
foldid = sample(1:10,n replace = TRUE)
foldid = sample(1:10,n, replace = TRUE)
min(cv.sulnet(x,y,method = "suni",alpha = 0,foldid = foldid)$cvm)
min(cv.sulnet(x,y,method = "suni",alpha = NULL, lamPos = 0,foldid = foldid)$cvm)
foldid = sample(1:10,n replace = TRUE)
cvfit2D = cv.sulnet2D(x,y,alpha = seq(0,0.99,length.out = 11),
lambda.factor = 0.001, foldid = foldid)
cvfit2Dl = cv.sulnet2D(x,y,alpha = NULL, lamPos = seq(0.01,24,length.out = 21),
lambda.factor = 0.001, foldid = foldid)
cvfit2D = cv.sulnet2D(x,y,alpha = seq(0,0.99,length.out = 11),
lambda.factor = 0.001, foldid = foldid)
cvfit2Dl = cv.sulnet2D(x,y,alpha = NULL, lamPos = seq(0.01,24,length.out = 21),
lambda.factor = 0.001, foldid = foldid)
plot(cvfit2D)
plot(cvfit2Dl)
cvfit2D$cvm
cvfit2D = cv.sulnet2D(x,y,alpha = seq(0,0.99,length.out = 11),
lambda.factor = 0.01, foldid = foldid)
plot(cvfit2D)
max(abs(crossprod(info$F,y)))/n
max(crossprod(info$F,y))/n
min(crossprod(info$F,y))/n
cvfit2Dl = cv.sulnet2D(x,y,alpha = NULL, lamPos = seq(0.01,3,length.out = 21),
lambda.factor = 0.001, foldid = foldid)
plot(cvfit2Dl )
min(cvfit2Dl)
)
min(cvfit2Dl$cvm)
min(cvfit2D$cvm)
cvfit2D = cv.sulnet2D(x,y,alpha = seq(0,0.99,length.out = 11),
lambda.factor = 0.001, foldid = foldid)
min(cvfit2D$cvm)
document()
install()
library(devtools)
load_all()
document()
document()
library(uniLasso)
library(MASS)
n = 300;p=1000;p_true = 30;ntest = 100;sigma = 0.1;rho = 0.5
Sigma <- matrix(rho, nrow = p, ncol = p)
diag(Sigma) <- 1
x <- mvrnorm(n = n, mu = rep(0, p), Sigma = Sigma)
beta = c(rnorm(p_true),rep(0,p-p_true))
y = x %*% beta + rnorm(n,0,sigma)
library(uniLasso)
library(MASS)
n = 300;p=1000;p_true = 30;ntest = 100;sigma = 0.1;rho = 0.5
Sigma <- matrix(rho, nrow = p, ncol = p)
diag(Sigma) <- 1
x <- mvrnorm(n = n, mu = rep(0, p), Sigma = Sigma)
beta = c(rnorm(p_true),rep(0,p-p_true))
y = x %*% beta + rnorm(n,0,sigma)
foldid = sample(1:10,n replace = TRUE)
info = uniInfo(x,y,loo = TRUE)
cvalpha = cv.sulnet2D(x,y,alpha = seq(0,0.99,length.out = 11),
foldid = foldid)
foldid = sample(1:10,n, replace = TRUE)
info = uniInfo(x,y,loo = TRUE)
cvalpha = cv.sulnet2D(x,y,alpha = seq(0,0.99,length.out = 11),
foldid = foldid)
cvlamPos =  cv.sulnet2D(x,y,alpha = NULL, lamPos = seq(0.01,3,length.out = 21),
foldid = foldid)
plot(cvalpha)
plot(cvlamPos)
cv2step = cv.sulnet(info$F,y,foldid = foldid)
plot(cv2step)
cvtest = cv.sulnet(x,y,method = "test",foldid = foldid)
plot(cvtest)
cvsuni = cv.sulnet(x,y,method = "suni",foldid = foldid)
plot(cvsuni)
cvtest2 = cv.sulnet(info$F,y,method = "test",foldid = foldid,negOnly = TRUE)
plot(cvtest2)
plot(cv2step)
cv2step = cv.sulnet(info$F,y,foldid = foldid, standardize = FALSE)
plot(cv2step)
cvsuni = cv.sulnet(x,y,method = "suni",foldid = foldid, standardize = FALSE)
plot(cvsuni)
plot(cv2step)
cvtest = cv.sulnet(x,y,method = "test",lamPos = 0,foldid = foldid, standardize = FALSE)
plot(cvtest)
cvsuni = cv.sulnet(x,y,method = "suni",lamPos = 0,foldid = foldid, standardize = FALSE)
plot(cvsuni)
cvsuni = cv.sulnet(x,y,method = "suni",alpha = NULL,lamPos = 0,foldid = foldid, standardize = FALSE)
plot(cvsuni)
plot(cv2step)
plot(cvtest)
plot(cvsuni)
cvtest2 = cv.sulnet(info$F,y,method = "test",lamPos = 0,foldid = foldid,negOnly = TRUE, standardize = FALSE)
plot(cvtest2)
cvsuni2 = cv.sulnet(info$F,y,method = "suni",alpha = NULL,lamPos = 0,foldid = foldid,negOnly = TRUE, standardize = FALSE)
plot(cvsuni2)
cv2step = cv.sulnet(info$F,y,foldid = foldid, standardize = FALSE)
plot(cv2step)
cv2step = cv.sulnet(info$F,y,foldid = foldid, standardize = FALSE)
plot(cv2step,main = "cv2step")
cvtest = cv.sulnet(x,y,method = "test",lamPos = 0,foldid = foldid, standardize = FALSE)
plot(cvtest,main = "cvtest")
cvsuni = cv.sulnet(x,y,method = "suni",alpha = NULL,lamPos = 0,foldid = foldid, standardize = FALSE)
plot(cvsuni,main = "cvsuni")
cvtest2 = cv.sulnet(info$F,y,method = "test",lamPos = 0,foldid = foldid,negOnly = TRUE, standardize = FALSE)
plot(cvtest2,main = "cvtest2")
cvsuni2 = cv.sulnet(info$F,y,method = "suni",alpha = NULL,lamPos = 0,foldid = foldid,negOnly = TRUE, standardize = FALSE)
plot(cvsuni2,main = "cvsuni2")
loof = cvalpha$sulnet2D.fit$univariate.fit$fitted.values
cv2step = cv.sulnet(loof,y,foldid = foldid, standardize = FALSE)
plot(cv2step,main = "cv2step")
cvtest = cv.sulnet(x,y,method = "test",lamPos = 0,foldid = foldid, standardize = FALSE)
plot(cvtest,main = "cvtest")
cvtest2 = cv.sulnet(loof,y,method = "test",lamPos = 0,foldid = foldid,negOnly = TRUE, standardize = FALSE)
plot(cvtest2,main = "cvtest2")
cvsuni = cv.sulnet(x,y,method = "suni",alpha = NULL,lamPos = 0,foldid = foldid, standardize = FALSE)
plot(cvsuni,main = "cvsuni")
cvsuni$lambda == cvsuni2$lambda
cvsuni$lambda
cvsuni2$lambda
cvsuni$lambda - cvsuni2$lambda
plot(cv.sulnet(x,y))
n = 300;p=1000;p_true = 30;ntest = 100;sigma = 0.1;rho = 0.5
Sigma <- matrix(rho, nrow = p, ncol = p)
diag(Sigma) <- 1
x <- mvrnorm(n = n, mu = rep(0, p), Sigma = Sigma)
beta = c(rnorm(p_true),rep(0,p-p_true))
y = x %*% beta + rnorm(n,0,sigma)
suni = sulnet(x,y,method = "suni",alpha = NULL, lamPos = 0)
test = sulnet(x,y,method = "test",alpha = NULL, lamPos = 0)
ls = sulnet(x,y)
coef(suni)
coef(suni)[,1]
coef(suni)[,1] == coef(test)[,1]
sum(coef(suni)[,1] == coef(test)[,1])
sum(coef(suni)[,1] == coef(ls)[,1])
suni = sulnet(x,y,method = "suni",alpha = 0, lamPos = 0)
test = sulnet(x,y,method = "test",alpha = 0, lamPos = 0)
ls = sulnet(x,y)
sum(coef(suni)[,1] == coef(test)[,1])
sum(coef(suni)[,1] == coef(ls)[,1])
sum(coef(suni)[,2] == coef(test)[,2])
sum(coef(suni)[,2] == coef(ls)[,2])
sum(coef(ls)[,2] == coef(test)[,2])
which(coef(suni)[,2] != coef(test)[,2])
which(coef(suni)[,2] != coef(ls)[,2])
which(coef(test)[,2] != coef(ls)[,2])
coef(test)[c(1,6),2]
coef(ls)[c(1,6),2]
coef(suni)[c(1,6),2]
round(coef(suni)[c(1,6),2],10)
round(coef(suni)[c(1),2],10)
coef(suni)[1,2]
suni = sulnet(x,y,method = "suni",alpha = 0, lamPos = 0, negOnly = TRUE)
test = sulnet(x,y,method = "test",alpha = 0, lamPos = 0, negOnly = TRUE)
ls = sulnet(x,y)
sum(coef(suni)[,2] == coef(test)[,2])
sum(coef(suni)[,2] == coef(ls)[,2])
sum(coef(ls)[,2] == coef(test)[,2])
sum(coef(suni)[,3] == coef(test)[,3])
sum(coef(suni)[,3] == coef(ls)[,3])
sum(coef(ls)[,3] == coef(test)[,3])
suni = sulnet(x,y,method = "suni",alpha = NULL, lamPos = 0, negOnly = TRUE)
test = sulnet(x,y,method = "test",alpha = NULL, lamPos = 0, negOnly = TRUE)
ls = sulnet(x,y)
sum(coef(suni)[,3] == coef(test)[,3])
sum(coef(suni)[,3] == coef(ls)[,3])
sum(coef(ls)[,3] == coef(test)[,3])
library(devtools)
load_all()
suni = sulnet(x,y,method = "suni",alpha = NULL, lamPos = 0, negOnly = TRUE)
test = sulnet(x,y,method = "test",alpha = NULL, lamPos = 0, negOnly = TRUE)
ls = sulnet(x,y)
sum(coef(suni)[,3] == coef(test)[,3])
sum(coef(suni)[,3] == coef(ls)[,3])
sum(coef(ls)[,3] == coef(test)[,3])
suni$univariate.fit$fitted.values
suni = sulnet(x,y,method = "suni",alpha = NULL, lamPos = 0, negOnly = TRUE)
test = sulnet(x,y,method = "test",alpha = 0, lamPos = 0, negOnly = TRUE)
ls = sulnet(x,y)
sum(coef(suni)[,3] == coef(test)[,3])
sum(coef(suni)[,3] == coef(ls)[,3])
sum(coef(ls)[,3] == coef(test)[,3])
sum(coef(suni)[,5] == coef(test)[,5])
sum(coef(suni)[,5] == coef(ls)[,5])
sum(coef(ls)[,5] == coef(test)[,5])
suni = sulnet(x,y,method = "suni",alpha = 0, lamPos = 0, negOnly = TRUE)
test = sulnet(x,y,method = "test",alpha = 0, lamPos = 0, negOnly = TRUE)
ls = sulnet(x,y)
sum(coef(suni)[,5] == coef(test)[,5])
sum(coef(suni)[,5] == coef(ls)[,5])
sum(coef(ls)[,5] == coef(test)[,5])
suni$univariate.fit$fitted.values
suni$lambda == test$lambda
suni = sulnet(x,y,method = "suni",alpha = 0, lamPos = 0, negOnly = TRUE)
test = sulnet(x,y,method = "test",alpha = 0, lamPos = 0, negOnly = TRUE)
ls = sulnet(x,y)
sum(coef(suni)[,5] == coef(test)[,5])
sum(coef(suni)[,5] == coef(ls)[,5])
sum(coef(ls)[,5] == coef(test)[,5])
suni$univariate.fit$fitted.values
suni$lambda == test$lambda
suni$lambda
test$lambda
sum(ls$lambda == test$lambda)
sum(coef(suni)[,5] == coef(test)[,5])
sum(coef(suni)[,5] == coef(ls)[,5])
sum(coef(ls)[,5] == coef(test)[,5])
which(coef(suni)[,5] != coef(ls)[,5])
coef(suni)[c(1,6),5]
coef(ls)[c(1,6),5]
sum(coef(suni)[,75] == coef(test)[,75])
sum(coef(suni)[,75] == coef(ls)[,75])
sum(coef(ls)[,75] == coef(test)[,75])
coef(suni)[which(coef(suni)[,75] == coef(test)[,75]),75]
coef(test)[which(coef(suni)[,75] == coef(test)[,75]),75]
# all steps
lambda = seq(5,0,length.out = 100)
suni = sulnet(x, y, method = "suni", alpha = 0, lamPos = 0, lambda = lambda)
test = sulnet(x, y, method = "test", alpha = 0, lamPos = 0, lambda = lambda)
f = suni$univariate.fit$fitted.values
sum(f == test$univariate.fit$fitted.values)
ls = sulnet(f,y,lambda = lambda)
sum(coef(suni)[,75] == coef(test)[,75])
sum(coef(suni)[,75] == coef(ls)[,75])
sum(coef(ls)[,75] == coef(test)[,75])
coef(suni)[which(coef(suni)[,75] == coef(ls)[,75]),75]
which(coef(suni)[,75] == coef(ls)[,75])
coef(suni)[which(coef(suni)[,75] != coef(ls)[,75]),75]
coef(ls)[which(coef(suni)[,75] != coef(ls)[,75]),75]
which(coef(suni)[,75]!=0)
sum(coef(suni)[,75] == coef(test)[,75])
sum(suni$fbeta[,75] == coef(ls)[,75])
suni$fbeta[,75]
sum(suni$fbeta[,75] == coef(ls)[-1,75])
sum(coef(ls)[-1,75] == test$fbeta[,75])
# all steps tune alpha and lamPos, first try to see if the two fortran codes give same results
lambda = seq(5,0,length.out = 100)
suni = sulnet(x, y, method = "suni", alpha = NULL, lamPos = 0.1, lambda = lambda)
test = sulnet(x, y, method = "test", alpha = 0, lamPos = 0.1, lambda = lambda)
sum(f == test$univariate.fit$fitted.values)
sum(coef(suni)[,75] == coef(test)[,75])
sum(coef(suni)[,96] == coef(test)[,96])
sec = sulnet(f, y, method = "suni", alpha = NULL, lamPos = 0.1, lambda = lambda, negOnly = TRUE)
sum(coef(suni)[,96] == coef(test)[,96])
sum(suni$fbeta[,96] == coef(sec)[,96])
sum(suni$fbeta[,96] == coef(sec)[-1,96])
# all steps tune alpha and lamPos such that they are the same
lambda = seq(5,0,length.out = 100)
suni = sulnet(x, y, method = "suni", alpha = 0.1, lamPos = 0.1, lambda = lambda)
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[96]*0.1, lambda = lambda * 0.9)
sum(coef(suni)[,96] == coef(test)[,96])
coef(suni)[coef(suni)[,96] == coef(test)[,96],96]
coef(suni)[coef(suni)[,96] != coef(test)[,96],96]
coef(test)[coef(suni)[,96] != coef(test)[,96],96]
as.vector(coef(suni)[coef(suni)[,96] != coef(test)[,96],96] - coef(test)[coef(suni)[,96] != coef(test)[,96],96])
suni2 = sulnet(x, y, method = "suni", alpha = NULL, lamPos = lambda[96]*0.1, lambda = lambda * 0.9)
sum(coef(suni)[,96] == coef(test)[,96])
sum(coef(suni)[,96] == coef(suni2)[,96])
sum(coef(test)[,96] == coef(suni2)[,96])
sum(coef(suni)[,92] == coef(test)[,92])
sum(coef(suni)[,98] == coef(test)[,98])
length(which(coef(suni)[,96]!=0))
# all steps tune alpha and lamPos such that they are the same
suni = sulnet(x, y, method = "suni", alpha = 0.1, lamPos = 0.1, lambda = 0.3)
test = sulnet(x, y, method = "test", alpha = 0, lamPos = 0.3*0.1, lambda = 0.3 * 0.9)
suni2 = sulnet(x, y, method = "suni", alpha = NULL, lamPos = 0.3*0.1, lambda = 0.3 * 0.9)
sum(coef(suni) == coef(test))
sum(coef(suni) == coef(suni2))
sum(coef(test) == coef(suni2))
length(which(coef(suni)!=0))
suni = sulnet(x, y, method = "suni", alpha = 0.2, lamPos = 0.1, lambda = 0.3)
test = sulnet(x, y, method = "test", alpha = 0, lamPos = 0.3*0.2, lambda = 0.3 * 0.8)
suni2 = sulnet(x, y, method = "suni", alpha = NULL, lamPos = 0.3*0.2, lambda = 0.3 * 0.8)
sum(coef(suni) == coef(test))
sum(coef(suni) == coef(suni2))
sum(coef(test) == coef(suni2))
# all steps tune alpha and lamPos such that they are the same, using multiple lambda value,
# but only choosing the index with correctly tuned lamPos to compare
lambda = seq(5,0,length.out = 100)
index = 2
alpha = 0.2
suni = sulnet(x, y, method = "suni", alpha = alpha)
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
suni2 = sulnet(x, y, method = "suni", alpha = NULL, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
sum(coef(suni) == coef(test))
sum(coef(suni) == coef(suni2))
sum(coef(test) == coef(suni2))
sum(coef(suni)[,index] == coef(test)[,index])
# second step, probably caused by numeric issues
suni = sulnet(x,y,method = "suni",alpha = 0, lamPos = 0, negOnly = TRUE)
test = sulnet(x,y,method = "test",alpha = 0, lamPos = 0, negOnly = TRUE)
ls = sulnet(x,y)
sum(coef(suni)[,75] == coef(test)[,75])
sum(coef(suni)[,75] == coef(ls)[,75])
sum(coef(ls)[,75] == coef(test)[,75])
coef(suni)[which(coef(suni)[,75] != coef(test)[,75]),75]
coef(suni)[which(coef(suni)[,75] != coef(ls)[,75]),75] - coef(ls)[which(coef(suni)[,75] != coef(ls)[,75]),75]
sum(suni$lambda == test$lambda)
# second step, probably caused by numeric issues
suni = sulnet(x,y,method = "suni",alpha = 0, lamPos = 0, negOnly = TRUE)
test = sulnet(x,y,method = "test",alpha = 0, lamPos = 0, negOnly = TRUE)
ls = sulnet(x,y)
sum(coef(suni)[,75] == coef(test)[,75]) # 972
sum(coef(suni)[,75] == coef(ls)[,75]) #972
sum(coef(ls)[,75] == coef(test)[,75]) #1001
coef(suni)[which(coef(suni)[,75] != coef(ls)[,75]),75] - coef(ls)[which(coef(suni)[,75] != coef(ls)[,75]),75]
sum(suni$lambda == test$lambda)
suni$lambda
test$lambda
sum(abs(suni$lambda - test$lambda))
# all steps, alpha = lamPos = 0
lambda = seq(5,0,length.out = 100)
suni = sulnet(x, y, method = "suni", alpha = 0, lamPos = 0, lambda = lambda)
test = sulnet(x, y, method = "test", alpha = 0, lamPos = 0, lambda = lambda)
f = suni$univariate.fit$fitted.values
ls = sulnet(f,y,lambda = lambda)
sum(coef(suni)[,75] == coef(test)[,75])
sum(suni$fbeta[,75] == coef(ls)[-1,75])
sum(coef(ls)[-1,75] == test$fbeta[,75])
# all steps tune lamPos, first try to see if the two fortran codes give same results
lambda = seq(5,0,length.out = 100)
suni = sulnet(x, y, method = "suni", alpha = NULL, lamPos = 0.1, lambda = lambda)
test = sulnet(x, y, method = "test", alpha = 0, lamPos = 0.1, lambda = lambda)
f = suni$univariate.fit$fitted.values
sec = sulnet(f, y, method = "suni", alpha = NULL, lamPos = 0.1, lambda = lambda, negOnly = TRUE)
sum(coef(suni)[,96] == coef(test)[,96])
sum(suni$fbeta[,96] == coef(sec)[-1,96])
# all steps tune alpha and lamPos such that they are the same, using only 1 lambda value
suni = sulnet(x, y, method = "suni", alpha = 0.2, lambda = 0.3)
test = sulnet(x, y, method = "test", alpha = 0, lamPos = 0.3*0.2, lambda = 0.3 * 0.8)
suni2 = sulnet(x, y, method = "suni", alpha = NULL, lamPos = 0.3*0.2, lambda = 0.3 * 0.8)
sum(coef(suni) == coef(test))
sum(coef(suni) == coef(suni2))
sum(coef(test) == coef(suni2))
# all steps tune alpha and lamPos such that they are the same, using multiple lambda value,
# but only choosing the index with correctly tuned lamPos to compare
lambda = seq(5,0,length.out = 100)
index = 2
alpha = 0.2
suni = sulnet(x, y, method = "suni", alpha = alpha)
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
suni2 = sulnet(x, y, method = "suni", alpha = NULL, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
sum(coef(suni)[,index] == coef(test)[,index])
coef(suni)[coef(suni)[,index] != coef(test)[,index],index]
coef(test)[coef(suni)[,index] != coef(test)[,index],index]
# all steps tune alpha and lamPos such that they are the same, using multiple lambda value,
# but only choosing the index with correctly tuned lamPos to compare
lambda = seq(5,0,length.out = 100)
index = 2
alpha = 0.2
suni = sulnet(x, y, method = "suni", alpha = alpha, lambda = lambda)
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
suni2 = sulnet(x, y, method = "suni", alpha = NULL, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
sum(coef(suni)[,index] == coef(test)[,index])
sum(coef(suni)[,index] == coef(suni2)[,index])
sum(coef(test)[,index] == coef(suni2)[,index])
index = 5  # this index makes sure that the outcome will be affected by the warm start of previous iteration
alpha = 0.2
suni = sulnet(x, y, method = "suni", alpha = alpha, lambda = lambda)
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
suni2 = sulnet(x, y, method = "suni", alpha = NULL, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
sum(coef(suni)[,index] == coef(test)[,index])  # 1001
sum(coef(suni)[,index] == coef(suni2)[,index]) # 1001
sum(coef(test)[,index] == coef(suni2)[,index]) # 1001
# all steps tune alpha and lamPos such that they are the same, using multiple lambda value,
# but only choosing the index with correctly tuned lamPos to compare
index = 2  # this index makes sure that different warm start won't affect the outcome
alpha = 0.2
suni = sulnet(x, y, method = "suni", alpha = alpha)
lambda = suni$lambda
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
suni2 = sulnet(x, y, method = "suni", alpha = NULL, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
sum(coef(suni)[,index] == coef(test)[,index])  # 1001
coef(suni)[coef(suni)[,index] != coef(test)[,index],index]
coef(test)[coef(suni)[,index] != coef(test)[,index],index]
sum(coef(suni)[,index] == coef(suni2)[,index]) # 1001
coef(suni2)[coef(suni)[,index] != coef(test)[,index],index]
sum(coef(test)[,index] == coef(suni2)[,index]) # 1001
which(coef(test)[,1]!=0)
lambda = c(9e10, suni$lambda[-1])  # using a "big" number as the first lambda
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
sum(coef(suni)[,index] == coef(test)[,index])  # 1001
index = 5  # this index makes sure that the outcome will be affected by the warm start of previous iteration
alpha = 0.2
suni = sulnet(x, y, method = "suni", alpha = alpha)
lambda = c(9e10, suni$lambda[-1])
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
sum(coef(suni)[,index] == coef(test)[,index])  # 1001
index = 10  # this index makes sure that the outcome will be affected by the warm start of previous iteration
alpha = 0.2
suni = sulnet(x, y, method = "suni", alpha = alpha)
lambda = c(9e10, suni$lambda[-1])
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
sum(coef(suni)[,index] == coef(test)[,index])  # 1001
index = 40  # this index makes sure that the outcome will be affected by the warm start of previous iteration
alpha = 0.2
suni = sulnet(x, y, method = "suni", alpha = alpha)
lambda = c(9e10, suni$lambda[-1])
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
sum(coef(suni)[,index] == coef(test)[,index])  # 1001
lambda = seq(5,0,length.out = 100)
lambda = seq(5,0,length.out = 100)
index = 40  # this index makes sure that the outcome will be affected by the warm start of previous iteration
alpha = 0.2
suni = sulnet(x, y, method = "suni", alpha = alpha,lambda = lambda)
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
sum(coef(suni)[,index] == coef(test)[,index])  # 1001
index = 90  # this index makes sure that the outcome will be affected by the warm start of previous iteration
alpha = 0.2
suni = sulnet(x, y, method = "suni", alpha = alpha,lambda = lambda)
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
sum(coef(suni)[,index] == coef(test)[,index])  # 1001
sum(coef(suni)[,index] == coef(suni2)[,index]) # 1001
#lambda = seq(5,0,length.out = 100)
index = 90  # this index makes sure that the outcome will be affected by the warm start of previous iteration
alpha = 0.2
suni = sulnet(x, y, method = "suni", alpha = alpha)
lambda = c(9e10, suni$lambda[-1])
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
sum(coef(suni)[,index] == coef(test)[,index])  # 1001
which(coef(suni)[,index] != coef(test)[,index])
as.vector(which(coef(suni)[,index] != coef(test)[,index]))
ind<-as.vector(which(coef(suni)[,index] != coef(test)[,index]))
sum(abs(coef(suni)[ind,index] - coef(test)[ind,index]))
index = 50  # this index makes sure that the outcome will be affected by the warm start of previous iterations
alpha = 0.2
suni = sulnet(x, y, method = "suni", alpha = alpha)
lambda = c(9e10, suni$lambda[-1])
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
sum(coef(suni)[,index] == coef(test)[,index])  # 885, should be 1001
index = 60  # this index makes sure that the outcome will be affected by the warm start of previous iterations
alpha = 0.2
suni = sulnet(x, y, method = "suni", alpha = alpha)
lambda = c(9e10, suni$lambda[-1])
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
sum(coef(suni)[,index] == coef(test)[,index])  # 885, should be 1001
index = 90  # this index makes sure that the outcome will be affected by the warm start of previous iterations
alpha = 0.2
suni = sulnet(x, y, method = "suni", alpha = alpha)
lambda = c(9e10, suni$lambda[-1])
test = sulnet(x, y, method = "test", alpha = 0, lamPos = lambda[index]*alpha, lambda = lambda * (1-alpha))
sum(coef(suni)[,index] == coef(test)[,index])  # 885, should be 1001
ind<-as.vector(which(coef(suni)[,index] != coef(test)[,index]))
sum(abs(coef(suni)[ind,index] - coef(test)[ind,index])) # 0.005555355
