}
coef_dif
sunicold = sulnet2D(x,y, method = "sunicold",lambda = c(2,1),alpha = 0.5)
sunicoldl = sulnet2D(x,y, method = "sunicold",lambda = c(2,1) * (1-0.5),
alpha = NULL, lamPos = c(2,1) * 0.5)
sum(coef(sunicold)[[1]][,1] == coef(sunicoldl)[[1]][,1])
ind = which(coef(sunicold)[[1]][,1] != coef(sunicoldl)[[1]][,1])
sunicold = sulnet2D(x,y, method = "sunicold",lambda = c(2,1),alpha = 0.5)
sunicoldl = sulnet2D(x,y, method = "sunicold",lambda = c(2,1) * (1-0.5),
alpha = NULL, lamPos = c(2,1) * 0.5)
ind = which(coef(sunicold)[[1]][,1] != coef(sunicoldl)[[1]][,1])
sum(coef(sunicold)[[1]][,1] == coef(sunicoldl)[[1]][,1])
coef(sunicold)[[1]][ind,1]
coef(sunicold)[[1]][ind,1]
ind = which(coef(sunicold)[[2]][,2] != coef(sunicoldl)[[2]][,2])
sunicold = sulnet2D(x,y, method = "sunicold",lambda = c(2,1),alpha = 0.5)
sunicoldl = sulnet2D(x,y, method = "sunicold",lambda = c(2,1) * (1-0.5),
alpha = NULL, lamPos = c(2,1) * 0.5)
ind = which(coef(sunicold)[[2]][,2] != coef(sunicoldl)[[2]][,2])
coef(sunicold)[[2]][,2]
ind = which(coef(sunicold)[[1]][,2] != coef(sunicoldl)[[2]][,2])
coef(sunicold)[[1]][ind,2]
coef(sunicoldl)[[2]][ind,2])
coef(sunicoldl)[[2]][ind,2]
suni = sulnet2D(x,y,lambda = 0.5,alpha = 0.5)
sum(abs(coef(sunicold)[[1]][,2] - coef(suni)[[1]][,1]))
suni = sulnet2D(x,y,lambda = 1,alpha = 0.5)
sum(abs(coef(sunicold)[[1]][,2] - coef(suni)[[1]][,1]))
suni = sulnet2D(x,y,lambda = c(2,1),alpha = 0.5)
sum(abs(coef(sunicold)[[1]][,1] - coef(suni)[[1]][,1]))
sum(abs(coef(sunicold)[[1]][,2] - coef(suni)[[1]][,2]))
suni = sulnet2D(x,y,lambda = c(2,1),alpha = 0.5)
sunicold = sulnet2D(x,y, method = "sunicold",lambda = c(2,1),alpha = 0.5)
sum(abs(coef(sunicold)[[1]][,2] - coef(suni)[[1]][,2]))
suni = sulnet2D(x,y,lambda = 2,alpha = 0.5)
sunicold = sulnet2D(x,y, method = "sunicold",lambda = 2,alpha = 0.5)
sum(abs(coef(sunicold)[[1]][,2] - coef(suni)[[1]][,2]))
sum(abs(coef(sunicold)[[1]][,1] - coef(suni)[[1]][,1]))
suni = sulnet2D(x,y,lambda = 2,alpha = c(0.5,0.7))
sunicold = sulnet2D(x,y, method = "sunicold",lambda = 2,alpha = c(0.5,0.7)
sum(abs(coef(sunicold)[[1]][,1] - coef(suni)[[1]][,1]))
sunicold = sulnet2D(x,y, method = "sunicold",lambda = 2,alpha = c(0.5,0.7))
sum(abs(coef(sunicold)[[1]][,1] - coef(suni)[[1]][,1]))
sum(abs(coef(sunicold)[[2]][,1] - coef(suni)[[2][,1]))
sum(abs(coef(sunicold)[[2]][,1] - coef(suni)[[2]][,1]))
sunicold = sulnet2D(x,y, method = "sunicold",lambda = 2,alpha = c(0.5,0.7))
sunicoldl = sulnet2D(x,y, method = "sunicold",lambda = c(1, 0.6),
alpha = NULL, lamPos = c(1, 1.4))
sum(coef(sunicold)[[1]][,1] == coef(sunicoldl)[[1]][,1])
sum(coef(sunicold)[[2]][,2] == coef(sunicoldl)[[2]][,2])
sum(coef(sunicold)[[2]][,1] == coef(sunicoldl)[[2]][,2])
ind = which(coef(sunicold)[[2]][,1] != coef(sunicoldl)[[2]][,2])
coef(sunicold)[[2]][ind,1]
coef(sunicoldl)[[2]][ind,2]
sunicold = sulnet2D(x,y, method = "sunicold",lambda = c(2,1), alpha = c(0.5,0.7))
suni = sulnet2D(x,y,lambda = 2,alpha = c(0.5,0.7))
sum(abs(coef(sunicold)[[2]][,1] - coef(suni)[[2]][,1]))
sum(abs(coef(sunicold)[[1]][,1] - coef(suni)[[1]][,1]))
suni = sulnet2D(x,y,lambda = 2,alpha = c(0.5,0.7))
sunicold = sulnet2D(x,y, method = "sunicold",lambda = 2, alpha = c(0.5,0.7))
sum(abs(coef(sunicold)[[2]][,1] - coef(suni)[[2]][,1]))
sunicold = sulnet2D(x,y, method = "sunicold",lambda = 2, alpha = c(0.5,0.7))
sunicoldl = sulnet2D(x,y, method = "sunicold",lambda = c(1, 0.6),
alpha = NULL, lamPos = c(1, 1.4))
sum(coef(sunicold)[[1]][,1] == coef(sunicoldl)[[1]][,1])
sunicold2 = sulnet2D(x,y,method = "sunicold",lambda = c(2,1), alpha = c(0.5,0.7))
sum(coef(sunicold)[[1]][,1] == coef(sunicold2)[[1]][,1])
ind = which(coef(sunicold)[[1]][,1] != coef(sunicold2)[[1]][,1])
coef(sunicold)[[1]][ind,1]
coef(sunicold2)[[1]][ind,1]
sum(coef(sunicold)[[2]][,1] == coef(sunicold2)[[2]][,1])
ind = which(coef(sunicold)[[2]][,1] != coef(sunicold2)[[2]][,1])
coef(sunicold)[[2]][ind,1]
coef(sunicold2)[[2]][ind,1]
document()
clean_dll()
document()
install()
library(devtools)
load_all()
x
library(devtools)
load_all()
library(devtools)
load_all()
y <- drop(y)
x <- as.matrix(x)
nlambda = 100
np <- dim(x)
nobs <- as.integer(np[1])
nvars <- as.integer(np[2])
vnames <- colnames(x)
if (is.null(vnames))
vnames <- paste("V", seq(nvars), sep = "")
if (NROW(y) != nobs)
stop("x and y have different number of observations")
if (NCOL(y) > 1L) stop("Multivariate response is not supported now")
method = "sunicold"
lambda.factor = ifelse(nobs < nvars, 0.01, 1e-04)
lambda = seq(5,0.1,length.out = 5)
lambda2 = 0
pf = rep(1, nvars)
pf2 = rep(1, nvars)
dfmax = nvars + 1
pmax = min(dfmax * 1.2, nvars)
standardize = FALSE
intercept = TRUE
eps = 1e-08
maxit = 1e+06
lamPos = 0.1
loo = TRUE
alpha = seq(0, 0.5, length.out = 11)
negOnly = FALSE
lam2 <- as.double(lambda2)
pf <- as.double(pf)
pf2 <- as.double(pf2)
isd <- as.integer(standardize)
intr <- as.integer(intercept)
eps <- as.double(eps)
dfmax <- as.integer(dfmax)
pmax <- as.integer(pmax)
lamPos <- as.double(lamPos)
ignore_lamPos = FALSE
if(!is.null(alpha)){
alpha <- as.double(alpha)
ignore_lamPos = TRUE
}
jd <- as.integer(0)
nlam <- as.integer(nlambda)
if (is.null(lambda)) {
if (lambda.factor >= 1)
stop("lambda.factor should be less than 1")
flmin <- as.double(lambda.factor)
ulam <- double(1)
} else {
## flmin=1 if user define lambda
flmin <- as.double(1)
if (any(lambda < 0))
stop("lambdas should be non-negative")
ulam <- as.double(rev(sort(lambda)))
nlam <- as.integer(length(lambda))
}
maxit <- ifelse(method == "suni_2",as.integer(maxit), as.integer(maxit * nlam))
a=1
fit <- .Fortran("suniwalpha", lam2, lamPos, nobs, nvars, x, as.double(y), jd, pf, pf2,
dfmax, pmax, nlam, flmin, ulam, eps, isd, intr, maxit,
nalam = integer(1), b0 = double(nlam),
beta = double(pmax * nlam), ibeta = integer(pmax),
nbeta = integer(nlam), alam = double(nlam),
npass = integer(1), jerr = integer(1),
alpha = as.double(alpha[a]), iglamPos = as.logical(ignore_lamPos),
PACKAGE = "sulnet")
outlist <- getoutput(fit, maxit, pmax, nvars, vnames)
outlist$lambda
outlist$df
dimn(x)
dim(x)
dim(y)
beta = c(rnorm(p_true),rep(0,p-p_true))
y = x %*% beta + rnorm(n,0,sigma)
dim(y)
ulam = seq(4,1)
unifit <- .Fortran("loofit", nobs, nvars, x, y, loo,
beta0 = double(nvars),
beta  = double(nvars),
fit   = double(nobs * nvars),
PACKAGE = "sulnet")
library(devtools)
load_all()
unifit <- .Fortran("loofit", nobs, nvars, x, y, loo,
beta0 = double(nvars),
beta  = double(nvars),
fit   = double(nobs * nvars),
PACKAGE = "sulnet")
f <- matrix(unifit$fit, nrow = nobs, ncol = nvars)
dim(f)
alpha
n_alpha = length(alpha)
fb0list = list()
fbetamat = vector("list", length = n_alpha)
dfmat = vector("list", length = n_alpha)
npassesmat = vector("list", length = n_alpha)
jerrmat = vector("list", length = n_alpha)
b0list = list()
betamat = vector("list", length = n_alpha)
a=1
b0temp = rep(NA, nlam)
betalist <- vector("list", nlam)
dftemp = rep(NA, nlam)
npassestemp = rep(NA, nlam)
jerrtemp = rep(NA, nlam)
for(l in seq_along(ulam)){
fit <- .Fortran("suniwalpha", lam2, lamPos, nobs, nvars, f, as.double(y), jd, pf, pf2,
dfmax, pmax, nlam = as.integer(1), flmin, ulam = as.double(ulam[l]), eps, isd, intr, maxit,
nalam = integer(1), b0 = double(1),
beta = double(pmax * 1), ibeta = integer(pmax),
nbeta = integer(1), alam = double(1),
npass = integer(1), jerr = integer(1),
alpha = as.double(alpha[a]), iglamPos = as.logical(ignore_lamPos),
PACKAGE = "sulnet")
outlist <- getoutput(fit, maxit, pmax, nvars, vnames)
b0temp[l] = as.double(outlist$b0)
betalist[[l]] <- outlist$beta
dftemp[l] <- as.double(outlist$df)
npassestemp[l] <- fit$npass
jerrtemp[l] <- fit$jerr
}
ulam[1]
fit2 = sulnet(x,y,lambda = ulam, alpha = 0,negOnly = TRUE)
fit2$beta
betalist[[1]]
sum(fit2$beta[,1] == betalist[[1]])
which(fit2$beta[,1] != betalist[[1]])
fit2$beta[28,1]
betalist[[1]][28]
fit2 = sulnet(x,y,lambda = ulam, alpha = 0,negOnly = TRUE,method = "suni")
sum(fit2$beta[,1] == betalist[[1]])
which(fit2$beta[,1] != betalist[[1]])
betalist[[1]][28]
fit2$beta[28,1]
max(abs(crossprod(x,y)))/nobs
l=1
fit <- .Fortran("suniwalpha", lam2, lamPos, nobs, nvars, f, as.double(y), jd, pf, pf2,
dfmax, pmax, nlam = as.integer(1), flmin, ulam = as.double(ulam[l]), eps, isd, intr, maxit,
nalam = integer(1), b0 = double(1),
beta = double(pmax * 1), ibeta = integer(pmax),
nbeta = integer(1), alam = double(1),
npass = integer(1), jerr = integer(1),
alpha = as.double(alpha[a]), iglamPos = as.logical(ignore_lamPos),
PACKAGE = "sulnet")
fit$beta
ulam[l]
alpha[a]
ignore_lamPos
fit$nalam
pf
isd
document()
fit=sulnet(x,y,method = "suni"ï¼Œlambda = 2, alpha = 0.2)
fit2D = sulnet2D(x,y,method = "suniforcecold",lambda = seq(4,1,length.out = 31),alpha = 0.2)#,alpha = seq(0,0.9,length.out = 11))
fit=sulnet(x,y,method = "suni",lambda = 2, alpha = 0.2)
fit2D = sulnet2D(x,y,method = "suniforcecold",lambda = seq(4,1,length.out = 31),alpha = 0.2)#,alpha = seq(0,0.9,length.out = 11))
sum(coef(fit2D)[[1]][,21] == coef(fit)[[1]])
coef(fit)[[1]]
coef(fit)
sum(coef(fit2D)[[1]][,21] == coef(fit))
ind = which(coef(fit2D)[[1]][,21] != coef(fit))
coef(fit2D)[[1]][ind,21]
coef(fit)[ind]
document()
fit=sulnet(x,y,method = "suni",lambda = 2, alpha = 0.2)
fit2D = sulnet2D(x,y,method = "suniforcecold",lambda = seq(4,1,length.out = 31),alpha = 0.2)#,alpha = seq(0,0.9,length.out = 11))
sum(coef(fit2D)[[1]][,21] == coef(fit))
ind = which(coef(fit2D)[[1]][,21] != coef(fit))
coef(fit2D)[[1]][ind,21]
coef(fit)[ind]
seq(4,1,length.out = 31) [21]
fit2D = sulnet2D(x,y,method = "suniforcecold",lambda = 2,alpha = 0.2)
sum(coef(fit2D)[[1]][,1] == coef(fit))
unifit <- .Fortran("loofit", nobs, nvars, x, y, loo,
beta0 = double(nvars),
beta  = double(nvars),
fit   = double(nobs * nvars),
PACKAGE = "sulnet")
f <- matrix(unifit$fit, nrow = nobs, ncol = nvars)
alpha
n_alpha = length(alpha)
fb0list = list()
fbetamat = vector("list", length = n_alpha)
dfmat = vector("list", length = n_alpha)
npassesmat = vector("list", length = n_alpha)
jerrmat = vector("list", length = n_alpha)
b0list = list()
betamat = vector("list", length = n_alpha)
a=1
b0temp = rep(NA, nlam)
betalist <- vector("list", nlam)
nlam
betalist <- vector("list", nlam)
dftemp = rep(NA, nlam)
ulam
nlam=5
b0temp = rep(NA, nlam)
betalist <- vector("list", nlam)
dftemp = rep(NA, nlam)
npassestemp = rep(NA, nlam)
jerrtemp = rep(NA, nlam)
loo
fit2D$univariate.fit$fitted.values
fit2D$univariate.fit$beta
unifit$beta0
unifit$beta
beta[1:30]
y <- drop(y)
x <- as.matrix(x)
nlambda = 100
np <- dim(x)
nobs <- as.integer(np[1])
nvars <- as.integer(np[2])
vnames <- colnames(x)
if (is.null(vnames))
vnames <- paste("V", seq(nvars), sep = "")
if (NROW(y) != nobs)
stop("x and y have different number of observations")
if (NCOL(y) > 1L) stop("Multivariate response is not supported now")
method = "sunicold"
lambda.factor = ifelse(nobs < nvars, 0.01, 1e-04)
lambda = seq(5,0.1,length.out = 5)
lambda2 = 0
pf = rep(1, nvars)
pf2 = rep(1, nvars)
dfmax = nvars + 1
pmax = min(dfmax * 1.2, nvars)
standardize = FALSE
intercept = TRUE
eps = 1e-08
maxit = 1e+06
lamPos = 0.1
loo = TRUE
alpha = seq(0, 0.5, length.out = 11)
negOnly = FALSE
lam2 <- as.double(lambda2)
pf <- as.double(pf)
pf2 <- as.double(pf2)
isd <- as.integer(standardize)
intr <- as.integer(intercept)
eps <- as.double(eps)
dfmax <- as.integer(dfmax)
pmax <- as.integer(pmax)
lamPos <- as.double(lamPos)
ignore_lamPos = FALSE
if(!is.null(alpha)){
alpha <- as.double(alpha)
ignore_lamPos = TRUE
}
jd <- as.integer(0)
nlam <- as.integer(nlambda)
if (is.null(lambda)) {
if (lambda.factor >= 1)
stop("lambda.factor should be less than 1")
flmin <- as.double(lambda.factor)
ulam <- double(1)
} else {
## flmin=1 if user define lambda
flmin <- as.double(1)
if (any(lambda < 0))
stop("lambdas should be non-negative")
ulam <- as.double(rev(sort(lambda)))
nlam <- as.integer(length(lambda))
}
maxit <- ifelse(method == "suni_2",as.integer(maxit), as.integer(maxit * nlam))
flmin
unifit <- .Fortran("loofit", nobs, nvars, x, y, loo,
beta0 = double(nvars),
beta  = double(nvars),
fit   = double(nobs * nvars),
PACKAGE = "sulnet")
f <- matrix(unifit$fit, nrow = nobs, ncol = nvars)
n_alpha = length(alpha)
fb0list = list()
fbetamat = vector("list", length = n_alpha)
dfmat = vector("list", length = n_alpha)
npassesmat = vector("list", length = n_alpha)
jerrmat = vector("list", length = n_alpha)
b0list = list()
betamat = vector("list", length = n_alpha)
a
b0temp = rep(NA, nlam)
betalist <- vector("list", nlam)
dftemp = rep(NA, nlam)
npassestemp = rep(NA, nlam)
jerrtemp = rep(NA, nlam)
l
fit <- .Fortran("suniwalpha", lam2, lamPos, nobs, nvars, f, as.double(y), jd, pf, pf2,
dfmax, pmax, nlam = as.integer(1), flmin = as.integer(1), ulam = as.double(ulam[l]), eps, isd, intr, maxit,
nalam = integer(1), b0 = double(1),
beta = double(pmax * 1), ibeta = integer(pmax),
nbeta = integer(1), alam = double(1),
npass = integer(1), jerr = integer(1),
alpha = as.double(alpha[a]), iglamPos = as.logical(ignore_lamPos),
PACKAGE = "sulnet")
outlist <- getoutput(fit, maxit, pmax, nvars, vnames)
outlist$b0
fit2 <- .Fortran("suniwalpha", lam2, lamPos, nobs, nvars, f, as.double(y), jd, pf, pf2,
dfmax, pmax, nlam, flmin, ulam, eps, isd, intr, maxit,
nalam = integer(1), b0 = double(nlam),
beta = double(pmax * nlam), ibeta = integer(pmax),
nbeta = integer(nlam), alam = double(nlam),
npass = integer(1), jerr = integer(1),
alpha = as.double(alpha[a]), iglamPos = as.logical(ignore_lamPos),
PACKAGE = "sulnet")
fit2$alam
fit$alam
fit <- .Fortran("suniwalpha", lam2, lamPos, nobs, nvars, f, as.double(y), jd, pf, pf2,
dfmax, pmax, nlam = as.integer(1), flmin = as.integer(1), ulam = as.double(ulam[l]), eps, isd, intr, maxit,
nalam = integer(1), b0 = double(1),
beta = double(pmax * 1), ibeta = integer(pmax),
nbeta = integer(1), alam = double(1),
npass = integer(1), jerr = integer(1),
alpha = as.double(alpha[a]), iglamPos = as.logical(ignore_lamPos),
PACKAGE = "sulnet")
fit$alam
fit <- .Fortran("suniwalpha", lam2, lamPos, nobs, nvars, f, as.double(y), jd, pf, pf2,
dfmax, pmax, nlam = as.integer(1), flmin = as.integer(2), ulam = as.double(ulam[l]), eps, isd, intr, maxit,
nalam = integer(1), b0 = double(1),
beta = double(pmax * 1), ibeta = integer(pmax),
nbeta = integer(1), alam = double(1),
npass = integer(1), jerr = integer(1),
alpha = as.double(alpha[a]), iglamPos = as.logical(ignore_lamPos),
PACKAGE = "sulnet")
fit$alam
fit <- .Fortran("suniwalpha", lam2, lamPos[a], nobs, nvars, f, as.double(y), jd, pf, pf2,
dfmax, pmax, nlam = as.integer(1), flmin = as.double(1), ulam = as.double(ulam[l]), eps, isd, intr, maxit,
nalam = integer(1), b0 = double(1),
beta = double(pmax * 1), ibeta = integer(pmax),
nbeta = integer(1), alam = double(1),
npass = integer(1), jerr = integer(1),
alpha = as.double(0), iglamPos = as.logical(ignore_lamPos),
PACKAGE = "sulnet")
fit$alam
fit$beta
fit2$beta
fit2$b0
outlist <- getoutput(fit, maxit, pmax, nvars, vnames)
outlist2 <- getoutput(fit2, maxit, pmax, nvars, vnames)
outlist$
beta
as.vector(outlist$beta)
as.vector(outlist2$beta[,1])
document()
fit=sulnet(x,y,method = "suni",lambda = 2, alpha = 0.2)
fit2D = sulnet2D(x,y,method = "suniforcecold",lambda = seq(4,1,length.out = 31),alpha = 0.2)#,alpha = seq(0,0.9,length.out = 11))
sum(coef(fit2D)[[1]][,1] == coef(fit))
fit <- .Fortran("suniwalpha", lam2, lamPos, nobs, nvars, f, as.double(y), jd, pf, pf2,
dfmax, pmax, nlam = as.integer(1), flmin = as.double(1), ulam = as.double(ulam[l]), eps, isd, intr, maxit,
nalam = integer(1), b0 = double(1),
beta = double(pmax * 1), ibeta = integer(pmax),
nbeta = integer(1), alam = double(1),
npass = integer(1), jerr = integer(1),
alpha = as.double(alpha[a]), iglamPos = as.logical(ignore_lamPos),
PACKAGE = "sulnet")
ulam
nlam
b0temp = rep(NA, nlam)
betalist <- vector("list", nlam)
dftemp = rep(NA, nlam)
npassestemp = rep(NA, nlam)
jerrtemp = rep(NA, nlam)
for(l in seq_along(ulam)){
fit <- .Fortran("suniwalpha", lam2, lamPos, nobs, nvars, f, as.double(y), jd, pf, pf2,
dfmax, pmax, nlam = as.integer(1), flmin = as.double(1), ulam = as.double(ulam[l]), eps, isd, intr, maxit,
nalam = integer(1), b0 = double(1),
beta = double(pmax * 1), ibeta = integer(pmax),
nbeta = integer(1), alam = double(1),
npass = integer(1), jerr = integer(1),
alpha = as.double(alpha[a]), iglamPos = as.logical(ignore_lamPos),
PACKAGE = "sulnet")
outlist <- getoutput(fit, maxit, pmax, nvars, vnames)
b0temp[l] = as.double(outlist$b0)
betalist[[l]] <- outlist$beta
dftemp[l] <- as.double(outlist$df)
npassestemp[l] <- fit$npass
jerrtemp[l] <- fit$jerr
}
ones = rep(1,sum(jerrtemp==0))
unibeta <- outer(unifit$beta, ones)
unibeta0 <- outer(unifit$beta0, ones)
betatemp = do.call(cbind, betalist)
View(betatemp)
as.vector(betatemp[,1])
max(crossprod(f,y))/nobs
max(abs(crossprod(f,y)))/nobs
as.vector(betatemp[,2])
betalist[[2]]
outlist2$beta
sum(outlist2$beta == betatemp)
which(outlist2$beta != betatemp, arr.ind = TRUE)
fit3 = sulnet(x,y,lambda = ulam, alpha = 0,method = "suni")
sim(fit3$fbeta == outlist2$beta)
sum(fit3$fbeta == outlist2$beta)
betalist[[1]][28]
betalist[[2]][28]
ind = which(outlist2$beta != betatemp, arr.ind = TRUE)
sum(abs(outlist2$beta[ind]-betatemp[ind]))
fit3 = sulnet(x,y,lambda = ulam[2], alpha = 0,method = "suni")
coef(fit3)[28]
coef(fit3)[29]
fit3$fbeta[28]
document()
fit=sulnet(x,y,method = "suni",lambda = 2, alpha = 0.2)
fit2D = sulnet2D(x,y,method = "suniforcecold",lambda = seq(4,1,length.out = 31),alpha = 0.2)#,alpha = seq(0,0.9,length.out = 11))
as.vector(coef(fit2D)[[1]][,21])
as.vector(coef(fit))
fit=sulnet(x,y,method = "suni",lambda = 1, alpha = 0.2)
as.vector(coef(fit2D)[[1]][,31])
as.vector(coef(fit))
install()
library(devtools)
document()
install()
library(devtools)
install()
library(devtools)
install()
library(devtools)
install()
library(devtools)
document()
install()
library(devtools)
document()
install()
