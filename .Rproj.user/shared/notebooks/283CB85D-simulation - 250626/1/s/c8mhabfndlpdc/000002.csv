"1","
<!-- rnb-source-begin eyJkYXRhIjoiYGBgclxuQiA9IDEwMFxubiA9IDMwMCA7IG50ZXN0ID0gMTAwXG5wID0gMTAwMFxucF90cnVlID0gMzBcbnNpZ21hID0gMC4xXG5cblxubXNlID0gcmVwKE5BLEIqMylcbnN1cHBvcnQgPSByZXAoTkEsQiozKVxudGVzdF9lcnJvciA9IHJlcChOQSxCKjMpXG5mb3IoYiBpbiAxOkIpe1xuICB4ID0gbWF0cml4KHJub3JtKG4qcCwwLHNxcnQoMC41KSkgKyBybm9ybSgxLDAsc3FydCgwLjUpKSwgbiwgcClcbiAgYmV0YSA9IGMocm5vcm0ocF90cnVlKSxyZXAoMCxwLXBfdHJ1ZSkpXG4gIHkgPSB4ICUqJSBiZXRhICsgcm5vcm0obiwwLHNpZ21hKVxuICBcbiAgeHRlc3QgPSBtYXRyaXgocm5vcm0obnRlc3QqcCwwLHNxcnQoMC41KSkgKyBybm9ybSgxLDAsc3FydCgwLjUpKSwgbnRlc3QsIHApXG4gIHl0ZXN0ID0geHRlc3QgJSolIGJldGEgKyBybm9ybShudGVzdCwwLHNpZ21hKVxuICBcbiAgIyMgZ2V0IHRoZSBsb28gbWF0cml4IEYgZm9yIHNvZnQtdW5pbGFzc29cbiAgaW5mbyA9IHVuaUluZm8oeCx5LFwiZ2F1c3NpYW5cIixsb28gPSBUUlVFKVxuICBcbiAgIyMgc29mdC11bmlsYXNzb1xuICBmaXRfc3VuaSA9IGN2LmdjZG5ldChpbmZvJEYsIHksIGludGVyY2VwdCA9IFRSVUUsIHN0YW5kYXJkaXplID0gRkFMU0UsIG1ldGhvZCA9IFwic3VuaVwiKVxuICBiX3RlbXAgPSAgY29lZihmaXRfc3VuaSlcbiAgYmV0YV9zdW5pID0gYl90ZW1wWy0xXSAqIGluZm8kYmV0YVxuICBiZXRhX3N1bmlfcHJlZCA9IGMoYl90ZW1wWzFdKyBzdW0oYl90ZW1wWy0xXSAqIGluZm8kYmV0YTApLCBiZXRhX3N1bmkpXG4gIFxuICAjIyB1bmlsYXNzb1xuICBmaXRfdW5pID0gY3YudW5pTGFzc28oeCx5LCBpbmZvID0gaW5mbywgZmFtaWx5ID0gXCJnYXVzc2lhblwiLCBpbnRlcmNlcHQgPSBUUlVFKVxuICBiZXRhX3VuaSA9IGFzLnZlY3RvcihmaXRfdW5pJGdsbW5ldC5maXQkYmV0YVssd2hpY2goZml0X3VuaSRsYW1iZGEuMXNlID09IGZpdF91bmkkbGFtYmRhKV0pXG4gIFxuICAjIyBsYXNzb1xuICBmaXRfbHMgPSBjdi5nY2RuZXQoeCx5LG1ldGhvZCA9IFwibHNcIiwgaW50ZXJjZXB0ID0gVFJVRSwgc3RhbmRhcmRpemUgPSBUUlVFKVxuICBiZXRhX2xzID0gY29lZihmaXRfbHMpWy0xXVxuICBcbiAgIyMgbXNlXG4gIG1zZVsoKGItMSkqMysxKTooYiozKV0gPSBjKHN1bSgoYmV0YS1iZXRhX3N1bmkpXjIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VtKChiZXRhLWJldGFfdW5pKV4yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1bSgoYmV0YS1iZXRhX2xzKV4yKSlcbiAgXG4gICMjIHN1cHBvcnRcbiAgc3VwcG9ydFsoKGItMSkqMysxKTooYiozKV0gPSBjKHN1bShiZXRhX3N1bmkhPTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1bShiZXRhX3VuaSE9MCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VtKGJldGFfbHMhPTApKVxuICBcbiAgIyMgdGVzdCBlcnJvclxuICBuZXdfeHRlc3QgPSBjYmluZChyZXAoMSxudGVzdCkseHRlc3QpXG4gIHRlc3RfZXJyb3JbKChiLTEpKjMrMSk6KGIqMyldID0gYyhzdW0oKG5ld194dGVzdCAlKiUgYmV0YV9zdW5pX3ByZWQgLSB5dGVzdCleMiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VtKChuZXdfeHRlc3QgJSolIGMoZml0X3VuaSRnbG1uZXQuZml0JGEwW3doaWNoKGZpdF91bmkkbGFtYmRhLjFzZSA9PSBmaXRfdW5pJGxhbWJkYSldLCBiZXRhX3VuaSkgLSB5dGVzdCleMiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VtKChwcmVkaWN0KGZpdF9scyx4dGVzdCkgLSB5dGVzdCleMikpXG59XG5gYGAifQ== -->

```r
B = 100
n = 300 ; ntest = 100
p = 1000
p_true = 30
sigma = 0.1


mse = rep(NA,B*3)
support = rep(NA,B*3)
test_error = rep(NA,B*3)
for(b in 1:B){
  x = matrix(rnorm(n*p,0,sqrt(0.5)) + rnorm(1,0,sqrt(0.5)), n, p)
  beta = c(rnorm(p_true),rep(0,p-p_true))
  y = x %*% beta + rnorm(n,0,sigma)
  
  xtest = matrix(rnorm(ntest*p,0,sqrt(0.5)) + rnorm(1,0,sqrt(0.5)), ntest, p)
  ytest = xtest %*% beta + rnorm(ntest,0,sigma)
  
  ## get the loo matrix F for soft-unilasso
  info = uniInfo(x,y,\"gaussian\",loo = TRUE)
  
  ## soft-unilasso
  fit_suni = cv.gcdnet(info$F, y, intercept = TRUE, standardize = FALSE, method = \"suni\")
  b_temp =  coef(fit_suni)
  beta_suni = b_temp[-1] * info$beta
  beta_suni_pred = c(b_temp[1]+ sum(b_temp[-1] * info$beta0), beta_suni)
  
  ## unilasso
  fit_uni = cv.uniLasso(x,y, info = info, family = \"gaussian\", intercept = TRUE)
  beta_uni = as.vector(fit_uni$glmnet.fit$beta[,which(fit_uni$lambda.1se == fit_uni$lambda)])
  
  ## lasso
  fit_ls = cv.gcdnet(x,y,method = \"ls\", intercept = TRUE, standardize = TRUE)
  beta_ls = coef(fit_ls)[-1]
  
  ## mse
  mse[((b-1)*3+1):(b*3)] = c(sum((beta-beta_suni)^2),
                           sum((beta-beta_uni)^2),
                           sum((beta-beta_ls)^2))
  
  ## support
  support[((b-1)*3+1):(b*3)] = c(sum(beta_suni!=0),
                               sum(beta_uni!=0),
                               sum(beta_ls!=0))
  
  ## test error
  new_xtest = cbind(rep(1,ntest),xtest)
  test_error[((b-1)*3+1):(b*3)] = c(sum((new_xtest %*% beta_suni_pred - ytest)^2),
                                     sum((new_xtest %*% c(fit_uni$glmnet.fit$a0[which(fit_uni$lambda.1se == fit_uni$lambda)], beta_uni) - ytest)^2),
                                     sum((predict(fit_ls,xtest) - ytest)^2))
}
```

<!-- rnb-source-end -->
"
"0","```r
B = 100
n = 300 ; ntest = 100
p = 1000
p_true = 30
sigma = 0.1


mse = rep(NA,B*3)
support = rep(NA,B*3)
test_error = rep(NA,B*3)
for(b in 1:B){
  x = matrix(rnorm(n*p,0,sqrt(0.5)) + rnorm(1,0,sqrt(0.5)), n, p)
  beta = c(rnorm(p_true),rep(0,p-p_true))
  y = x %*% beta + rnorm(n,0,sigma)
  
  xtest = matrix(rnorm(ntest*p,0,sqrt(0.5)) + rnorm(1,0,sqrt(0.5)), ntest, p)
  ytest = xtest %*% beta + rnorm(ntest,0,sigma)
  
  ## get the loo matrix F for soft-unilasso
  info = uniInfo(x,y,\"gaussian\",loo = TRUE)
  
  ## soft-unilasso
  fit_suni = cv.gcdnet(info$F, y, intercept = TRUE, standardize = FALSE, method = \"suni\")
  b_temp =  coef(fit_suni)
  beta_suni = b_temp[-1] * info$beta
  beta_suni_pred = c(b_temp[1]+ sum(b_temp[-1] * info$beta0), beta_suni)
  
  ## unilasso
  fit_uni = cv.uniLasso(x,y, info = info, family = \"gaussian\", intercept = TRUE)
  beta_uni = as.vector(fit_uni$glmnet.fit$beta[,which(fit_uni$lambda.1se == fit_uni$lambda)])
  
  ## lasso
  fit_ls = cv.gcdnet(x,y,method = \"ls\", intercept = TRUE, standardize = TRUE)
  beta_ls = coef(fit_ls)[-1]
  
  ## mse
  mse[((b-1)*3+1):(b*3)] = c(sum((beta-beta_suni)^2),
                           sum((beta-beta_uni)^2),
                           sum((beta-beta_ls)^2))
  
  ## support
  support[((b-1)*3+1):(b*3)] = c(sum(beta_suni!=0),
                               sum(beta_uni!=0),
                               sum(beta_ls!=0))
  
  ## test error
  new_xtest = cbind(rep(1,ntest),xtest)
  test_error[((b-1)*3+1):(b*3)] = c(sum((new_xtest %*% beta_suni_pred - ytest)^2),
                                     sum((new_xtest %*% c(fit_uni$glmnet.fit$a0[which(fit_uni$lambda.1se == fit_uni$lambda)], beta_uni) - ytest)^2),
                                     sum((predict(fit_ls,xtest) - ytest)^2))
}
```"
